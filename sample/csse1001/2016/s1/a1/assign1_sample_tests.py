#!/usr/bin/env python3

import imp
import sys
sys.modules['test'] = imp.new_module('test')
exec('#!/usr/bin/env python3\n\nVERSION = "1.1.0"\n\n# #############################################################################\n# DEFAULTS #\nDEFAULTS = {\n    "VERSION": VERSION,\n    "CSSE7030": False,\n    "SCRIPT": "assign1",\n    "TEST_DATA": "assign1_testdata",\n    "TEST_DATA_RAW": \'\',\n    "MAXDIFF": 2500,\n    "SHOW_VERSION": True,\n    "REMOVE_TRACEBACK_DUPLICATES": True,\n    "HIDE_TRACEBACK_PATHS": False,\n    "USE_JSON": False,\n}\n# END DEFAULTS #\n# #############################################################################\n\n__CSSE1001TEST = True\nGLOBAL = "__CSSE1001TEST"\n\nimport unittest\nimport sys\nimport difflib\nfrom io import StringIO\nimport contextlib\nfrom collections import OrderedDict\nimport traceback\nimport re\nimport json\nimport argparse\nimport time\nimport os\nimport imp\nfrom enum import Enum, unique\n\n\n@unique\nclass TestOutcome(Enum):\n    SUCCEED = 0\n    FAIL = 1\n    SKIP = 2\n\n\ndef relative_import(module_path, module_name=None):\n    """\n    Imports a module relatively, regardless of whether relevant directories are python modules.\n\n    :param module_path: The path to the module to import.\n    :param module_name: The name of the module. If None, the filename of the module_path is used, sans extension.\n    :return: The module.\n    """\n    if module_name is None:\n        module_name = os.path.basename(module_path).split(\'.\')[0]\n\n    with open(module_path, "r") as fd:\n        sys.modules[module_name] = module = imp.new_module(module_name)\n        exec(fd.read(), sys.modules[module_name].__dict__)\n\n    return module\n\ndef _is_relevant_tb_level(tb, *globals):\n    """\n    Determines if a given traceback occurred in a file with any of the given globals.\n\n    :param tb: The traceback.\n    :param globals: The globals to check.\n    :return: Returns True iff traceback occurred in a file with ANY of the given globals.\n    """\n    for g in globals:\n        if g in tb.tb_frame.f_globals:\n            return True\n\n    return False\n\n\ndef _exc_info_to_string(err, ignored_exceptions=(AssertionError,), ignored_module_globals=(), suppress_paths=False,\n                        capture_locals=False):\n    """\n    Converts a sys.exc_info()-style tuple of values into a string.\n\n    :param err: sys.exc_info()-style tuple.\n    :param ignored_exceptions: Collection of Exceptions for which to ignore traceback lines.\n    :param ignored_module_globals: Collection of global flags used to ignore tracebacks that occur in files with any of\n        the given globals.\n    :param suppress_paths: Remove file paths from traceback, leaving only the filename.\n    :param capture_locals: If True, Local variables at the source of the error are included in the output.\n    :return: Formatted error string.\n    """\n    """"""\n    exctype, value, tb = err\n\n    # Skip test runner traceback levels\n    while tb and _is_relevant_tb_level(tb, *ignored_module_globals):\n        tb = tb.tb_next\n\n    # if exctype is test.failureException:\n    # # Skip assert*() traceback levels\n    # length = self._count_relevant_tb_levels(tb)\n    # else:\n    # length = None\n\n    length = None\n\n    tb_e = traceback.TracebackException(\n        exctype, value, tb, limit=length, capture_locals=capture_locals)\n    msgLines = list(tb_e.format())\n\n    if suppress_paths:\n        for i, line in enumerate(msgLines):\n            msgLines[i] = re.sub(r\'File ".*[\\\\/]([^\\\\/]+.py)"\', r\'File "\\1"\', line)\n\n    # from unittest.TestResult, but not needed at present\n    # commented due to unresolved reference to STDOUT/STDERR_LINE\n    # if self.buffer:\n    # output = sys.stdout.getvalue()\n    # error = sys.stderr.getvalue()\n    # if output:\n    #         if not output.endswith(\'\\n\'):\n    #             output += \'\\n\'\n    #         msgLines.append(STDOUT_LINE % output)\n    #     if error:\n    #         if not error.endswith(\'\\n\'):\n    #             error += \'\\n\'\n    #         msgLines.append(STDERR_LINE % error)\n    return \'\'.join(msgLines)\n\n\nclass CsseTestResult(unittest.TestResult):\n    _tb_no_duplicates = True\n    _tb_hide_paths = True\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self._results = OrderedDict()\n        self._test_cases = {}\n\n    def get_test_case_name(self, test):\n        if isinstance(test, OrderedTestCase):\n            return test.get_name()\n\n        return test.__class__.__name__\n\n    @staticmethod\n    def get_test_name(test):\n        return test.id().split(\'.\')[-1].strip().split(\'test_\', 1)[-1]\n\n    def startTest(self, test):\n        name = self.get_test_case_name(test)\n        if name not in self._results:\n            self._results[name] = {\n                "name": name,\n                "total": 0,\n                "passed": 0,\n                "failed": 0,\n                "skipped": 0,\n                "tests": OrderedDict()\n            }\n\n        test_name = self.get_test_name(test)\n        self._results[name][\'tests\'][test_name] = {}\n\n        super().startTest(test)\n\n    def add_outcome(self, test, outcome, message=None):\n        test_case_name = self.get_test_case_name(test)\n        test_name = self.get_test_name(test)\n\n        res = self._results[test_case_name]\n        res[outcome] += 1\n        res[\'total\'] += 1\n\n        res[\'tests\'][test_name] = {\n            "outcome": outcome,\n            # "subTests": OrderedDict()\n        }\n\n        if message:\n            res[\'tests\'][test_name][\'message\'] = message\n\n            # print("{}.{} {}".format(test_case_name, test_name, outcome))\n\n    def addError(self, test, err):\n        type, value, traceback = err\n\n        formatted_err = _exc_info_to_string(err, ignored_module_globals=(GLOBAL, "__unittest"),\n                                            suppress_paths=self._tb_hide_paths,\n                                            capture_locals=self.tb_locals)\n\n        self.add_outcome(test, \'failed\', formatted_err)\n\n        self.errors.append((test, formatted_err))\n        self._mirrorOutput = True\n\n    def addFailure(self, test, err):\n        type, value, traceback = err\n\n        self.add_outcome(test, \'failed\', str(value))\n\n        self.failures.append((test, str(value)))\n        self._mirrorOutput = True\n\n    def addSuccess(self, test):\n        self.add_outcome(test, \'passed\')\n        super().addSuccess(test)\n\n\n    def addSkip(self, test, reason):\n        self.add_outcome(test, \'skipped\', reason)\n        super().addSkip(test, reason)\n\n    def getDescription(self, test, include_case=True):\n        key = test.id().split(\'test_\')[-1].strip()\n        i = int(key) + 1\n        name = test.get_test(key)\n\n        case = test.get_name()\n        order = test.get_order()\n        #i = order.index("test_" + name) + 1\n\n        width = len(str(len(order) + 1))\n\n        if not include_case:\n            case = ""\n\n        return ("{} {}.{} {}").format(case, i, (width - len(str(i))) * " ", name).strip()\n\n\nclass CssePrintTestResult(CsseTestResult, unittest.TextTestResult):\n    outcome_symbols = {\n        \'failed\': \'-\',\n        \'passed\': \'+\',\n        \'skipped\': \'?\'\n    }\n\n    def startTest(self, test):\n        name = self.get_test_case_name(test)\n        if name not in self._results:\n            print("-" * 80)\n            print(name)\n            print("-" * 80)\n\n        super().startTest(test)\n\n    def add_outcome(self, test, outcome, message=None):\n        super().add_outcome(test, outcome, message)\n\n        symbol = self.outcome_symbols[outcome]\n        test_case_name = self.get_test_name(test).split(\'test_\', 1)[-1].strip()\n        desc = self.getDescription(test, False)\n        print("{:<4}{} {}".format("", symbol, desc))\n\n    def printErrors(self):\n        if self.errors or self.failures:\n            print(\'-\' * 80)\n            print_block("Failed Tests")\n\n        if len(self.errors) and self._tb_no_duplicates:\n            # remove duplicates\n            test, err = self.errors[-1]\n\n            # iterate over indices [n-1, ..., 0]\n            for i in range(len(self.errors) - 2, -1, -1):\n\n                last_test, last_err = self.errors[i]\n                if err == last_err:\n                    self.errors[i + 1] = test, "AS ABOVE"\n\n                test, err = last_test, last_err\n\n        self.printErrorList(\'ERROR\', self.errors)\n        self.printErrorList(\'FAIL\', self.failures)\n\n    def printErrorList(self, flavour, errors):\n        TAB = " " * 4\n        for test, err in errors:\n            print("=" * 80)\n            print("{}: {}".format(flavour, self.getDescription(test)))\n            print("-" * 80)\n            print(TAB + str(err).replace(\'\\n\', \'\\n\' + TAB).strip())\n            print("")\n\n\n# class CsseTextTestResult(unittest.TextTestResult):\n#     def __init__(self, *args, **kwargs):\n#         super().__init__(*args, **kwargs)\n#         self._results = OrderedDict()\n#\n#     def get_test_case_name(self, test):\n#         if isinstance(test, OrderedTestCase):\n#             return test.get_name()\n#\n#         return test.__class__.__name__\n#\n#     def startTest(self, test):\n#         name = self.get_test_case_name(test)\n#         if name not in self._results:\n#             self._results[name] = {\n#                 "total": 0,\n#                 "passed": 0,\n#                 "failed": 0,\n#                 "skipped": 0,\n#                 "tests": OrderedDict()\n#             }\n#\n#         super().startTest(test)\n#         self.runbuffer = StringIO()\n#         self.runbuffer.write(test.id().split(\'.\')[-1].strip().split(\'test_\', 1)[-1])\n#         self.runbuffer.write(": {} \\n")\n#         self.stream.flush()\n#         self._stcount = 0\n#         self._stpass = 0\n#\n#     def addSubTest(self, test, subtest, err):\n#         self._stcount += 1\n#         super().addSubTest(test, subtest, err)\n#         if err:\n#             self.runbuffer.write("  - ")\n#         else:\n#             self._stpass += 1\n#             self.runbuffer.write("  + ")\n#         self.runbuffer.write(subtest.id().lstrip(test.id()).strip()[1:-1] + "\\n")\n#\n#     def addFailure(self, test, err):\n#         self.stream.write("\\t" + test.id().lstrip("test_"))\n#         self.stream.writeln("... FAIL")\n#         super().addFailure(test, err)\n#\n#     def addSuccess(self, test):\n#         super().addSuccess(test)\n#         if self.dots:\n#             self.stream.write(\'.\')\n#             self.stream.flush()\n#\n#     def printErrors(self):\n#         if self.errors or self.failures:\n#             self.stream.writeln("\\n/--------------\\\\")\n#             self.stream.writeln("| Failed Tests |")\n#             self.stream.writeln("\\\\--------------/")\n#         if self.dots or self.showAll:\n#             self.stream.writeln()\n#         self.printErrorList(\'ERROR\', self.errors)\n#         self.printErrorList(\'FAIL\', self.failures)\n#\n#     def printErrorList(self, flavour, errors):\n#         for test, err in errors:\n#             self.stream.writeln(self.separator1)\n#             self.stream.writeln("%s: %s" % (flavour, self.getDescription(test)))\n#             self.stream.writeln(self.separator2)\n#             self.stream.writeln("%s" % err)\n#\n#     def stopTest(self, test):\n#         super().stopTest(test)\n#         self.runbuffer.seek(0)\n#         self.stream.writeln(self.runbuffer.read().format("{}/{}".format(self._stpass, self._stcount)))\n#         del self.runbuffer\n\n\ndef print_block(text, width=80):\n    print("/" + (width - 2) * \'-\' + "\\\\")\n\n    for i in range(0, len(text), width - 4):\n        line = text[i:i + width - 4]\n\n        space = (width - 4) - len(line)\n\n        if space:\n            line = int(space / 2 + .5) * \' \' + line + int(space / 2) * \' \'\n\n        print(\'| \' + line + \' |\')\n\n    print("\\\\" + (width - 2) * \'-\' + "/")\n\n\ndef attribute_best_guess(object, attribute, guesses=3):\n    """\n    Attempts to guess the most likely attribute belonging to object that matches the given attribute.\n\n    :param object: The object to search.\n    :param attribute: The attribute to search for.\n    :param guesses: The number of guesses to make. Defaults to 3.\n\n    :return: A pair of (has_attribute, possible_matches):\n        has_attribute is True iff object has attribute.\n        possible_matches is a list of potential matches, ordered by likelihood, whose length is <= guesses.\n    """\n\n    if getattr(object, attribute, None):\n        return True, [attribute]\n\n    return False, difflib.get_close_matches(attribute, dir(object), n=guesses)\n\n\ndef end_test(test_case, reason, outcome):\n    """\n    Ends a test by performing the given action.\n\n    :param test_case: The unittest.TestCase to act upon.\n    :param reason: The reason for ending the test.\n    :param outcome: The outcome of the test (i.e. TestOutcome).\n    """\n    if outcome == TestOutcome.FAIL:\n        test_case.fail(reason)\n    elif outcome == TestOutcome.SKIP:\n        test_case.skipTest(reason)\n\n@contextlib.contextmanager\ndef hijack_stdio():\n    save_stdout = sys.stdout\n    save_stderr = sys.stderr\n    save_stdin = sys.stdin\n\n    try:\n        sys.stdout = StringIO()\n        sys.stderr = StringIO()\n        sys.stdin = StringIO()\n        yield sys.stdout, sys.stderr, sys.stdin\n    finally:\n        sys.stdout = save_stdout\n        sys.stderr = save_stderr\n        sys.stdin = save_stdin\n\n@contextlib.contextmanager\ndef hijack_stdout():\n    save_stdout = sys.stdout\n\n    try:\n        sys.stdout = StringIO()\n        yield sys.stdout\n    finally:\n        sys.stdout = save_stdout\n\n@contextlib.contextmanager\ndef hijack_stderr():\n    save_stderr = sys.stderr\n\n    try:\n        sys.stderr = StringIO()\n        yield sys.stderr\n    finally:\n        sys.stderr = save_stderr\n\n@contextlib.contextmanager\ndef hijack_stdin():\n    save_stdin = sys.stdin\n\n    try:\n        sys.stdin = StringIO()\n        yield sys.stdin\n    finally:\n        sys.stdin = save_stdin\n\n\nclass TestGenerator(object):\n    class NoReturnValue(object):\n        pass\n\n    @staticmethod\n    def function_naming_test(module, function):\n        """\n        Returns a function that tests whether a module has function.\n\n        :param module: The module that contains function.\n        :param function: The function to check for.\n        """\n\n        def fn(self):\n            match, guesses = attribute_best_guess(module, function)\n\n            if not match:\n                if not len(guesses):\n                    self.fail("No function named {!r}".format(function))\n                guesses = ", ".join([repr(g) for g in guesses])\n                text = "No function named {!r}. Perhaps: {}".format(function, guesses)\n\n                self.fail(text)\n\n        return fn\n\n\n    @staticmethod\n    def class_naming_test(module, klass, methods):\n        """\n        Returns a function that tests whether a module has class, and if that class has all of the given methods.\n\n        :param module: The module that contains function.\n        :param klass: The class to check for.\n        :param methods: A list of methods to check for.\n        """\n\n        def fn(self):\n            match, guesses = attribute_best_guess(module, klass)\n\n            if not match:\n                if not len(guesses):\n                    return self.fail("No class named {!r}".format(klass))\n\n                # todo: should this be a subTest?\n                # with self.subTest(klass):\n                guesses_text = ", ".join([repr(g) for g in guesses])\n                self.fail("No class named {!r}. Perhaps: {}".format(klass, guesses_text))\n\n            guess = guesses[0]\n            klass_guess = getattr(module, guess)\n\n            for i, method in enumerate(methods):\n                with self.subTest("{}.{}".format(klass, method)):\n                    match, guesses = attribute_best_guess(klass_guess, method)\n\n                    if not match:\n                        if not len(guesses):\n                            self.fail("No method named {!r} on class {!r}".format(method, guess))\n\n                        # todo: should this be a subTest?\n                        guesses_text = ", ".join([repr(g) for g in guesses])\n                        self.fail("No method named {!r} on class {!r}. Perhaps: {}".format(method, guess, guesses_text))\n\n        return fn\n\n\n    @staticmethod\n    def function_docstring_test(module, function, undefined_outcome=TestOutcome.FAIL):\n        """\n        Returns a function that tests whether a module\'s function has a docstring.\n\n        :param module: The module that contains function.\n        :param function: The function to check for a docstring.\n        :param undefined_outcome: Action to perform (i.e. result of test) if the function is undefined,\n            or if there is no close match.\n        """\n\n        def fn(self):\n            # Get most likely function, if not the function itself\n            match, guesses = attribute_best_guess(module, function)\n\n            if match:\n                fn = getattr(module, function)\n            elif len(guesses):\n                fn = getattr(module, guesses[0])\n            else:\n                return end_test(self, "No docstring for undefined function {!r}.".format(function), undefined_outcome)\n\n            # Check for a docstring\n            if fn.__doc__ is None or not fn.__doc__.strip():\n                self.fail("No docstring for function {!r}.".format(function))\n\n        return fn\n\n\n    @staticmethod\n    def class_docstring_test(module, klass, methods, undefined_outcome=TestOutcome.FAIL):\n        """\n        Returns a function that tests, for a given module, whether class and each of the given methods have docstrings.\n\n        :param module: The containing module.\n        :param klass: The class to check for a docstring.\n        :param methods: A list of methods on klass to check for docstrings.\n        :param undefined_outcome: Action to perform (i.e. result of test) if the class or a method is undefined,\n            or if there is no close match.\n        """\n\n        def fn(self):\n            match, guesses = attribute_best_guess(module, klass)\n\n            # handle undefined class\n            if not len(guesses):\n                return end_test(self, "No docstring for undefined class {!r}".format(klass), undefined_outcome)\n\n            guess = guesses[0]\n            klass_guess = getattr(module, guess)\n\n            for i, method in enumerate(methods):\n                with self.subTest("{}.{}".format(klass, method)):\n                    match, guesses = attribute_best_guess(klass_guess, method)\n\n                    if match:\n                        fn = getattr(klass_guess, method)\n                    elif len(guesses):\n                        fn = getattr(klass_guess, guesses[0])\n                    else:\n                        reason = "No docstring for undefined method {!r} on class {!r}.".format(method, guess)\n\n                        if undefined_outcome == TestOutcome.FAIL:\n                            self.fail(reason)\n                        elif undefined_outcome == TestOutcome.SKIP:\n                            self.skipTest(reason)\n                        continue\n\n                    # Check for a docstring\n                    if fn.__doc__ is None or not fn.__doc__.strip():\n                        self.fail("No docstring for method {!r} on class {!r}.".format(method, guess))\n\n\n        return fn\n\n\n    @staticmethod\n    def class_inheritance_test(module, klass, parent_klass, undefined_outcome=TestOutcome.FAIL):\n        """\n        Returns a function that tests, for a given module, whether class inherits from parent.\n\n        :param module: The containing module.\n        :param klass: The class to check.\n        :param parent_klass: The parent class to check for.\n        :param undefined_outcome: Action to perform (i.e. result of test) if the class is undefined,\n            or if there is no close match.\n        """\n\n        def fn(self):\n            match, guesses = attribute_best_guess(module, klass)\n\n            # handle undefined class\n            if not len(guesses):\n                return end_test(self, "No parent class for undefined class {!r}.".format(klass), undefined_outcome)\n\n            guess = guesses[0]\n            klass_guess = getattr(module, guess)\n\n            parents = klass_guess.__bases__\n\n            if parent_klass not in parents:\n                parents_text = ", ".join([repr(p.__name__) for p in parents])\n                self.fail("Incorrect parent class(es) {} for class {!r}.".format(parents_text, guess))\n\n        return fn\n\n    @staticmethod\n    def function_comparison_test(module, function, args, result, undefined_outcome=TestOutcome.SKIP, **kwargs):\n        """\n        Returns a function that tests, for a given module, whether function returns result.\n\n        :param module: The containing module.\n        :param function: The function to test.\n        :param args: A tuple of arguments to supply to the function.\n        :param result: The expected return value.\n        :param undefined_outcome: Action to perform (i.e. result of test) if the function is undefined,\n            or if there is no close match.\n        """\n\n        # todo: suppress stdout/stderr?\n        def fn(self):\n            # Get most likely function, if not the function itself\n            match, guesses = attribute_best_guess(module, function)\n\n            if match:\n                fn = getattr(module, function)\n            elif len(guesses):\n                fn = getattr(module, guesses[0])\n            else:\n                return end_test(self, "Undefined function {!r}.".format(function), undefined_outcome)\n\n            self.assertEqual(fn(*args), result)\n\n        return fn\n\n    @staticmethod\n    def function_io_test(module, function, args, result, stdin="", stdout="", stderr="",\n                         undefined_outcome=TestOutcome.SKIP, exit_allowed=False, exit_error=None, **kwargs):\n        """\n        Returns a function that tests, for a given module, whether function returns result, using stdio.\n\n        :param module: The containing module.\n        :param function: The function to test.\n        :param args: A tuple of arguments to supply to the function.\n        :param result: The expected return value. Use TestGenerator.NoReturnValue to ignore return value.\n        :param stdin: The standard input to supply to the function.\n        :param stdout: The expected standard output from the function. Set to None to ignore comparison.\n        :param stderr: The expected standard error from the function. Set to None to ignore comparison.\n        :param undefined_outcome: Action to perform (i.e. result of test) if the function is undefined,\n            or if there is no close match.\n        :param exit_allowed: If True, the function is allowed to end by calling exit()/quit()/etc.\n        :param exit_error: The error text to use if an unallowed SystemExit occurs.\n        """\n\n        ignore_return = isinstance(result, TestGenerator.NoReturnValue)\n\n        # todo: add timeout\n        def fn(self):\n            # Get most likely function, if not the function itself\n            match, guesses = attribute_best_guess(module, function)\n\n            if match:\n                fn = getattr(module, function)\n            elif len(guesses):\n                fn = getattr(module, guesses[0])\n            else:\n                return end_test(self, "Undefined function {!r}.".format(function), undefined_outcome)\n\n\n            with hijack_stdio() as (stdout_stream, stderr_stream, stdin_stream):\n                sys.stdin.write(stdin)\n                sys.stdin.seek(0)\n\n                # ignore quit/exit\n                exited = False\n                try:\n                    real_res = fn(*args)\n                    if not ignore_return:\n                        self.assertEqual(real_res, result)\n                except SystemExit as e:\n                    exited = True\n                    if not exit_allowed:\n                        if exit_error is not None:\n                            return self.fail(exit_error)\n                        else:\n                            raise e\n\n                sys.stdout.seek(0)\n                if stdout is not None:\n                    self.assertEqual(sys.stdout.read(), stdout)\n\n                sys.stderr.seek(0)\n                if stderr is not None:\n                    self.assertEqual(sys.stderr.read(), stderr)\n\n        return fn\n\nDIFF_OMITTED = (\'\\nDiff is %s characters long. \'\n                 \'Set --diff to see it.\')\n\nclass UnorderedTestCase(unittest.TestCase):\n    _name = None\n\n    def _truncateMessage(self, message, diff):\n        max_diff = self.maxDiff\n        if max_diff is None or len(diff) <= max_diff:\n            return message + diff\n        return message + (DIFF_OMITTED % len(diff))\n\n    def get_name(self):\n        if self._name is not None:\n            return self._name\n\n        return self.__class__.__name__\n\nclass OrderedTestCase(UnorderedTestCase):\n    _order = None\n\n    @classmethod\n    def ensure_order(cls):\n        if cls._order is None:\n            cls._order = []\n\n    @classmethod\n    def add_test(cls, name, fn):\n        cls.ensure_order()\n\n        key = len(cls._order)\n\n        cls._order.append(name)\n\n        setattr(cls, "test_" + str(key), fn)\n\n    @classmethod\n    def add_test_methods(cls, methods):\n        for method, name in methods:\n            if name is None:\n                if method.startswith(\'test_\'):\n                    name = method.split(\'test_\', 1)[-1]\n                else:\n                    name = method\n\n            cls.add_test(name, method)\n\n    @classmethod\n    def get_order(cls):\n        return ["test_" + str(i) for i in range(len(cls._order))]\n\n    @classmethod\n    def get_test(cls, key):\n        return cls._order[int(key)]\n\n\n\n\ndef create_subclass(name, *parents):\n    return type(name, parents, {})\n\ndef create_test_case(name):\n    test_case = create_subclass(name + \'TestCase\', OrderedTestCase)\n    set_test_case_name(name, test_case)\n\n    return test_case\n\n\ndef create_naming_test_case(module, functions=(), klasses=()):\n    test_case = create_test_case(\'Naming\')\n\n    for function in functions:\n        test_case.add_test(function,\n                           TestGenerator.function_naming_test(module, function))\n\n    for klass, methods, *_ in klasses:\n        test_case.add_test(klass,\n                           TestGenerator.class_naming_test(module, klass, methods))\n\n    return test_case\n\n\ndef create_docstring_test_case(module, functions=(), klasses=(), undefined_outcome=TestOutcome.SKIP):\n    test_case = create_test_case(\'Docstrings\')\n\n    for function in functions:\n        test_case.add_test(function,\n                           TestGenerator.function_docstring_test(module, function, undefined_outcome=undefined_outcome))\n\n    for klass, methods, *_ in klasses:\n        test_case.add_test(klass,\n                           TestGenerator.class_docstring_test(module, klass, methods,\n                                                              undefined_outcome=undefined_outcome))\n\n    return test_case\n\n\ndef create_inheritance_test_case(module, klasses=(), undefined_outcome=TestOutcome.SKIP):\n    test_case = create_test_case(\'Inheritance\')\n\n    for klass, _, *parents in klasses:\n        for parent in parents:\n            if parent is None:\n                continue\n            test_case.add_test(klass,\n                               TestGenerator.class_inheritance_test(module, klass, parent,\n                                                                    undefined_outcome=undefined_outcome))\n\n    return test_case\n\n\ndef create_comparison_test_case(module, function, tests, undefined_outcome=TestOutcome.SKIP):\n    test_case = create_test_case(function)\n\n    for i, test in enumerate(tests):\n\n        kwargs = {\n            "undefined_outcome": undefined_outcome\n        }\n\n        kwargs.update(test)\n\n        test_case.add_test(kwargs[\'title\'],\n                           TestGenerator.function_comparison_test(module, function, **kwargs))\n\n    return test_case\n\ndef create_io_test_case(module, function, tests, undefined_outcome=TestOutcome.SKIP):\n    test_case = create_test_case(function)\n\n    for i, test in enumerate(tests):\n        kwargs = {\n            "undefined_outcome": undefined_outcome\n        }\n\n        kwargs.update(test)\n\n        test_case.add_test(kwargs[\'title\'],\n                           TestGenerator.function_io_test(module, function, **kwargs))\n\n    return test_case\n\n\ndef set_test_case_name(name, *test_cases):\n    for test_case in test_cases:\n        test_case._name = name\n\n\nclass CsseTestLoader(unittest.TestLoader):\n    def __init__(self, test_cases):\n        super().__init__()\n        self._test_cases = test_cases\n\n    def getTestCaseNames(self, testCaseClass):\n        if issubclass(testCaseClass, OrderedTestCase):\n            return testCaseClass.get_order()\n\n        return super().getTestCaseNames(testCaseClass)\n\n    def loadTestsFromModule(self, module, *args, pattern=None, **kwargs):\n        tests = []\n        for test_case in self._test_cases:\n            obj = test_case\n            if isinstance(obj, type) and issubclass(obj, unittest.TestCase):\n                tests.append(self.loadTestsFromTestCase(obj))\n            else:\n                raise TypeError("Class {!r} is not a subclass of unittest.TestCase.".format(test_case))\n\n        return self.suiteClass(tests)\n\n\nclass TestMaster(object):\n    _tests = None\n\n    def __init__(self, config = DEFAULTS):\n        self._meta = {}\n        self._config = config\n\n    def load_module(self, module_path):\n        try:\n            self._module = __import__(module_path.rstrip(\'.py\').replace("/", "."))\n            return None\n        except ImportError as e:\n            err = sys.exc_info()\n\n            result = {\n                "message": "Tests not run due to file not found",\n                # "details": "File {!r} does not exist.".format(module_path),\n                "error": e,\n                "type": "import",\n                "code": 2\n            }\n\n        except SyntaxError as e:\n            err = sys.exc_info()\n\n            result = {\n                "message": "Tests not run due to syntax error",\n                # "details": "Syntax error in {!r}.".format(module_path),\n                "error": e,\n                "type": "syntax",\n                "code": 3\n            }\n\n        text = _exc_info_to_string(err, ignored_module_globals=(GLOBAL, ), suppress_paths=True)\n        result[\'details\'] = text\n\n        return result\n\n\n    def set_meta(self, property, value):\n        self._meta[property] = value\n\n    def get_meta(self, property):\n        return self._meta[property]\n\n    def setup_args(self):\n        parser = argparse.ArgumentParser()\n\n        parser.add_argument("script",\n                            help="The script you want to run the tests against.",\n                            nargs="?",\n                            default=self._config["SCRIPT"])\n        parser.add_argument("test_data",\n                            help="The file containing test data to use.",\n                            nargs="?",\n                            default=self._config["TEST_DATA"])\n        parser.add_argument("-d", "--diff",\n                            help="The maximum number of characters in a diff",\n                            action="store",\n                            type=int,\n                            default=self._config["MAXDIFF"])\n        parser.add_argument("-m", "--masters",\n                            help="Whether or not to utilize master\'s tests.",\n                            action=\'store_true\',\n                            default=self._config["CSSE7030"])\n        parser.add_argument("-j", "--json",\n                            help="Whether or not to display output in JSON format.",\n                            action=\'store_true\',\n                            default=self._config["USE_JSON"])\n        parser.add_argument("--tb-hide-paths",\n                            help="Hide paths from traceback output.",\n                            action="store_true",\n                            default=self._config["HIDE_TRACEBACK_PATHS"])\n        parser.add_argument("--tb-no-duplicates",\n                            help="Remove duplicates from test output.",\n                            action="store_true",\n                            default=self._config["REMOVE_TRACEBACK_DUPLICATES"])\n        parser.add_argument(\'unittest_args\', nargs=\'*\', default=[])\n\n        self._args = parser.parse_args()\n        return self._args\n\n    def prepare(self):\n        raise NotImplemented("Prepare method must be implemented by TestMaster child class.")\n\n    def load_test_data(self):\n        if self._args.test_data:\n            data = __import__(self._args.test_data.rstrip(\'.py\'))\n            #data = relative_import(self._args.test_data, "data")\n        else:\n            import imp\n\n            data = imp.new_module(\'data\')\n            exec(self._config["TEST_DATA_RAW"], data.__dict__)\n\n        self._test_data = data.get_data(self._args)\n\n    # todo: clean this up and abstract\n    def main(self):\n        output = {\n            "version": self._config["VERSION"]\n        }\n\n        self.setup_args()\n\n        output_json = self._args.json\n\n        try:\n            self.load_test_data()\n        except Exception as e:\n            err = sys.exc_info()\n            text = _exc_info_to_string(err, ignored_module_globals=(GLOBAL, ), suppress_paths=True)\n\n            if self._args.json:\n                output[\'error\'] = \'test_data\'\n                output[\'error_message\'] = "Tests couldn\'t be run due to failure to load test data." + \'\\n\' + text\n            else:\n                print_block("Fatal error loading test_data.")\n                print(text)\n            sys.exit(1)\n\n        if not output_json and self._config[\'SHOW_VERSION\']:\n            print("Version: {}".format(output[\'version\']))\n\n        error = self.load_module(self._args.script)\n\n        if error:\n            output[\'error\'] = error[\'type\']\n            output[\'error_message\'] = error[\'message\'] + \'\\n\' + error[\'details\']\n\n            if output_json:\n                print(json.dumps(output, indent=" " * 4))\n            else:\n                print_block(error[\'message\'])\n                print(error[\'details\'])\n\n            return sys.exit(error[\'code\'])\n\n        self.prepare()\n\n        result_class = CsseTestResult if output_json else CssePrintTestResult\n\n        result_class._tb_no_duplicates = self._args.tb_no_duplicates\n        result_class._tb_hide_paths = self._args.tb_hide_paths\n\n        with hijack_stderr():\n            runner = unittest.TextTestRunner(verbosity=9, stream=None, resultclass=result_class)\n\n        for test_case in self._tests:\n            setattr(test_case, "maxDiff", self._args.diff or None)\n\n        loader = CsseTestLoader(self._tests)\n        if not output_json:\n            print_block("Summary of Results")\n        start = time.time()\n        program = unittest.main(exit=False, testRunner=runner, testLoader=loader,\n                                argv=[sys.argv[0]] + self._args.unittest_args)\n        stop = time.time()\n\n        result = program.result\n\n        output[\'total\'] = result.testsRun\n        fails, skips, errors = map(len, (result.failures, result.skipped, result.errors))\n        output[\'failed\'] = fails + errors\n        output[\'skipped\'] = skips\n        output[\'passed\'] = result.testsRun - (fails + errors + skips)\n\n        output[\'time\'] = stop - start\n\n        output[\'results\'] = result._results\n\n        if not output_json:\n            print("-" * 80)\n            print(\n                "Ran {total} tests in {time:.3f} seconds with {passed} passed/{skipped} skipped/{failed} failed.".format(\n                    **output))\n\n        if output_json:\n            print(json.dumps(output, indent=" " * 4))', sys.modules['test'].__dict__)

from test import *

# #############################################################################
# DEFAULT OVERRIDES #
DEFAULTS['VERSION'] = "2016s1_1.1.0"
DEFAULTS['HIDE_TRACEBACK_PATHS'] = True
DEFAULTS['CSSE7030'] = False
DEFAULTS['SCRIPT'] = 'assign1.py'
DEFAULTS['TEST_DATA_RAW'] = 'def get_data(args):\n    # #################### INPUTS ##########################\n    MAKE_INITIAL_STATE_4 = 4\n    MAKE_INITIAL_STATE_8 = 8\n    MAKE_INITIAL_STATE_12 = 12\n    MAKE_INITIAL_STATE_1000 = 1000\n\n    MAKE_POSITION_STRING_8 = 8\n    MAKE_POSITION_STRING_18 = 18\n    MAKE_POSITION_STRING_24 = 24\n    MAKE_POSITION_STRING_2000 = 2000\n\n    NUM_DIFFS_4 = "TATATATA__"\n    NUM_DIFFS_8 = \'TAATTA__AT\'\n    NUM_DIFFS_12 = \'TAATTATA__TTAT\'\n\n    POSITION_OF_BLANKS_8_0 = "TATATATA__"\n    POSITION_OF_BLANKS_8_1 = \'TAATTA__AT\'\n    POSITION_OF_BLANKS_8_2 = \'__TAATTAAT\'\n    POSITION_OF_BLANKS_12_1 = \'TAATTATA__TTAT\'\n    POSITION_OF_BLANKS_12_2 = \'TAATTATATTAT__\'\n\n    MAKE_MOVE_STATE_0_0 = "TATATATA__"\n    MAKE_MOVE_POSITION_0_0 = 1\n    MAKE_MOVE_STATE_0_1 = "T__ATATAAT"\n    MAKE_MOVE_POSITION_0_1 = 3\n    MAKE_MOVE_STATE_0_2 = "TAT__ATAAT"\n\n    MAKE_MOVE_STATE_1 = \'TAATTAAT__\'\n    MAKE_MOVE_STATE_2 = \'__TAATTAAT\'\n    MAKE_MOVE_STATE_3 = \'TAAT__TAAT\'\n    MAKE_MOVE_POSITION_0 = 0\n    MAKE_MOVE_POSITION_2 = 2\n    MAKE_MOVE_POSITION_4 = 4\n    MAKE_MOVE_POSITION_6 = 6\n    MAKE_MOVE_POSITION_8 = 8\n\n    STATES_0 = """\nTATATATA__\nT__ATATAAT\nTAT__ATAAT\n""".strip().split()\n\n    STATES_4 = """\nTATATATA__\nTATAT__AAT\nTA__TTAAAT\nTAATTTAA__\nT__TTTAAAA\n""".strip().split()\n\n    STATES_16 = """\nTATATATATATATATATATATATATATATATA__\n__TATATATATATATATATATATATATATATATA\nTATATATATATATATATATA__TATATATATATA\nTATAT__ATATATATATATAATTATATATATATA\nTATATTAATATATA__TATAATTATATATATATA\nTATATTAATATATAAATAT__TTATATATATATA\nTATATTAATATATAAATATTT__ATATATATATA\nTATATTAATA__TAAATATTTTAATATATATATA\n""".strip().split()\n\n    # ################## Expected Results ###########################\n    MAKE_INITIAL_STATE_4_RESULT = \'TATATATA__\'\n    MAKE_INITIAL_STATE_8_RESULT = \'TATATATATATATATA__\'\n    MAKE_INITIAL_STATE_12_RESULT = \'TATATATATATATATATATATATA__\'\n    MAKE_INITIAL_STATE_1000_RESULT = \'TA\' * 1000 + \'__\'\n\n    MAKE_POSITION_STRING_8_RESULT = \'01234567\'\n    MAKE_POSITION_STRING_18_RESULT = \'012345678901234567\'\n    MAKE_POSITION_STRING_24_RESULT = \'012345678901234567890123\'\n    MAKE_POSITION_STRING_2000_RESULT = \'0123456789\' * 200\n\n    NUM_DIFFS_4_RESULT = 8\n    NUM_DIFFS_8_RESULT = 6\n    NUM_DIFFS_12_RESULT = 9\n\n    POSITION_OF_BLANKS_8_0_RESULT = 8\n    POSITION_OF_BLANKS_8_1_RESULT = 6\n    POSITION_OF_BLANKS_8_2_RESULT = 0\n    POSITION_OF_BLANKS_12_1_RESULT = 8\n    POSITION_OF_BLANKS_12_2_RESULT = 12\n\n    MAKE_MOVE_1_0_RESULT = \'__ATTAATTA\'\n    MAKE_MOVE_1_6_RESULT = \'TAATTA__AT\'\n    MAKE_MOVE_2_2_RESULT = \'TA__ATTAAT\'\n    MAKE_MOVE_2_8_RESULT = \'ATTAATTA__\'\n    MAKE_MOVE_3_2_RESULT = \'TA__ATTAAT\'\n    MAKE_MOVE_3_6_RESULT = \'TAATTA__AT\'\n\n    SHOW_CURRENT_STATE_0_0 = """0123456789\nT__ATATAAT 7 1\n"""\n\n    SHOW_CURRENT_STATE_0_1 = """0123456789\nTAT__ATAAT 7 2\n"""\n\n    # ##################### Tests #####################################\n\n    def title_format_args(data):\n        return "{name}({args_str}){title}".format(**data)\n\n\n    def title_tests(tests_no_title, fn=None, title_format=title_format_args):\n        tests = []\n        for i, item in enumerate(tests_no_title):\n            args = item[\'args\']\n            result = item[\'result\']\n            title = item.get(\'title\', "")\n            data = {\n                "name": fn,\n                "title": title,\n                "args_str": ", ".join([str(arg) for arg in args]),\n                "args": args,\n                "result": result\n            }\n            item[\'title\'] = title_format(data)\n        return tests\n\n    ################################################################################\n    #                             make_initial_state                               #\n    ################################################################################\n\n\n    initial_states = [\n        {\n            "args": [MAKE_INITIAL_STATE_4],\n            "result": MAKE_INITIAL_STATE_4_RESULT,\n            "title": " (Sample from Specification)"\n        },\n        {\n            "args": [MAKE_INITIAL_STATE_8],\n            "result": MAKE_INITIAL_STATE_8_RESULT\n        },\n        {\n            "args": [MAKE_INITIAL_STATE_12],\n            "result": MAKE_INITIAL_STATE_12_RESULT\n        },\n        {\n            "args": [MAKE_INITIAL_STATE_1000],\n            "result": MAKE_INITIAL_STATE_1000_RESULT\n        }\n    ]\n\n    title_tests(initial_states, "initial_states")\n\n    ################################################################################\n    #                             make_position_string                             #\n    ################################################################################\n\n    position_strings = [\n        {\n            "args": [MAKE_POSITION_STRING_8],\n            "result": MAKE_POSITION_STRING_8_RESULT,\n        },\n        {\n            "args": [MAKE_POSITION_STRING_18],\n            "result": MAKE_POSITION_STRING_18_RESULT,\n            "title": " (Sample from Specification)"\n        },\n        {\n            "args": [MAKE_POSITION_STRING_24],\n            "result": MAKE_POSITION_STRING_24_RESULT\n        },\n        {\n            "args": [MAKE_POSITION_STRING_2000],\n            "result": MAKE_POSITION_STRING_2000_RESULT\n        }\n    ]\n\n    title_tests(position_strings, "position_strings")\n\n    ################################################################################\n    #                                  num_diffs                                   #\n    ################################################################################\n\n    diffs = [\n        {\n            "args": [NUM_DIFFS_4],\n            "result": NUM_DIFFS_4_RESULT,\n            "title": " (Sample from Specification)"\n        },\n        {\n            "args": [NUM_DIFFS_8],\n            "result": NUM_DIFFS_8_RESULT\n        },\n        {\n            "args": [NUM_DIFFS_12],\n            "result": NUM_DIFFS_12_RESULT\n        }\n    ]\n\n    diff_states = [(20, \'TTTTTTATTTAATAA__TTATAAAAAATTAAATAATTTATATAA\'),\n                   (26, \'TATTTAAATTTAAATTTTAATTTATATTT__ATAAAAAATATATATAATTAA\'),\n                   (34, \'ATTTTATAT__TAAAATAATATTAATATTTTAAATTATATTTTAAAATATATTTAATATAAA\'),\n                   (33, \'ATTTTAATTAATTTTAATAAATAAAATTTTAATAATTTTATATAATTAATAATTTAAAAATTA__TATTA\'),\n                   (49, \'TATATATATAAAAAATTTATTTAATTATTA__ATTTATAAAAATAATATATAATATTATTAATATTATAATTATATTTTA\'),\n                   (37, \'TATTTTTTTTAAAAAATTTATAAATAAAAATTTATTTTTAATTTATTAAAAAA__TATAATTTAATTATAAAAATTAAAATTTAATATATTT\'),\n                   (\n                       56,\n                       \'AAAATAATATTTAAATTATTTTTATATTATTATTTATAATAATTAAATAATATTAAATATTATTTAAAATTTAATATATTAATATT__TTAAATTAAATATTTAAA\'),\n                   (\n                       62,\n                       \'TAAATTAATTAAATATAATTATTATATATATATTTTAAAATTTAATTATAAAATTATAAAAATTATTTTTATATATTTATAAATATT__ATTTAATTAATTAATATATAA\'),\n                   (58,\n                    \'ATAATATTTTATATAATTAATAATTAAAAATTATTAAATTTTAAATATATTTTTATTTAAAATAAAATTTTTAATTAATTAATTATTTATATTAATAAAA__AATAATAAAATTTTTTTAATTA\'),\n                   (82,\n                    \'ATTATATATTAAATTTTTTAATATTTAAAAATTTATTTAAAAATTAATTTAAAATAAATA__AATTTAATTATATAATTTATATAATATTTAATAATATTTTTTATTATAAAAAAAAAAAAAAAAAATATTATTTTATTTTTATTTATATAATATATTTATTTATATTAA\')]\n    included_diff_states_indices = [1, 2, 3, 4, 12, 13]  # filter out useless tests\n    diffs += [{"args": [state], "result": res} for i, (res, state) in enumerate(diff_states) if\n              (i + 1) in included_diff_states_indices]\n\n    title_tests(diffs, "num_diffs")\n\n    ################################################################################\n    #                              position_of_blanks                              #\n    ################################################################################\n\n    blank_positions = [\n        {\n            "args": [POSITION_OF_BLANKS_8_0],\n            "result": POSITION_OF_BLANKS_8_0_RESULT,\n            "title": " (Sample from Specification)"\n        },\n        {\n            "args": [POSITION_OF_BLANKS_8_1],\n            "result": POSITION_OF_BLANKS_8_1_RESULT\n        },\n        {\n            "args": [POSITION_OF_BLANKS_8_2],\n            "result": POSITION_OF_BLANKS_8_2_RESULT\n        }\n    ]\n\n    title_tests(blank_positions, "position_of_blanks")\n\n    ################################################################################\n    #                                  make_move                                   #\n    ################################################################################\n\n    moves = [\n        {\n            "args": [MAKE_MOVE_STATE_0_0, MAKE_MOVE_POSITION_0_0],\n            "result": MAKE_MOVE_STATE_0_1,\n            "title": " (Sample #1 from Specification)"\n        },\n        {\n            "args": [MAKE_MOVE_STATE_0_1, MAKE_MOVE_POSITION_0_1],\n            "result": MAKE_MOVE_STATE_0_2,\n            "title": " (Sample #2 from Specification)"\n        },\n        {\n            "args": [MAKE_MOVE_STATE_1, MAKE_MOVE_POSITION_0],\n            "result": MAKE_MOVE_1_0_RESULT\n        },\n        {\n            "args": [MAKE_MOVE_STATE_1, MAKE_MOVE_POSITION_6],\n            "result": MAKE_MOVE_1_6_RESULT\n        },\n        {\n            "args": [MAKE_MOVE_STATE_2, MAKE_MOVE_POSITION_2],\n            "result": MAKE_MOVE_2_2_RESULT\n        },\n        {\n            "args": [MAKE_MOVE_STATE_2, MAKE_MOVE_POSITION_8],\n            "result": MAKE_MOVE_2_8_RESULT\n        },\n        {\n            "args": [MAKE_MOVE_STATE_3, MAKE_MOVE_POSITION_2],\n            "result": MAKE_MOVE_3_2_RESULT\n        },\n        {\n            "args": [MAKE_MOVE_STATE_3, MAKE_MOVE_POSITION_6],\n            "result": MAKE_MOVE_3_6_RESULT\n        }\n    ]\n\n    title_tests(moves, "make_move")\n\n    ################################################################################\n    #                              show_current_state                              #\n    ################################################################################\n\n    current_states_no_title = [\n        (" (Sample #1 from Specification)", [STATES_0[:2]], None, "", SHOW_CURRENT_STATE_0_0, ""),\n        (" (Sample #2 from Specification)", [STATES_0[:3]], None, "", SHOW_CURRENT_STATE_0_1, ""),\n    ]\n\n    cs = [(\'\',\n           [[\'TATATATATATATATA__\', \'TATATATATATA__TATA\', \'TATATA__TATATATATA\', \'TATATATATATATATA__\',\n             \'TATATATATATAT__AAT\']],\n           None, \'\', \'012345678901234567\\nTATATATATATAT__AAT 15 4\\n\', ""), (\'\', [\n        [\'TATATATATATATATA__\', \'TATATATATATAT__AAT\', \'TATATATATAT__ATAAT\', \'TATAT__ATATATATAAT\', \'TATATATATAT__ATAAT\',\n         \'TATATA__TATTAATAAT\']], None, \'\', \'012345678901234567\\nTATATA__TATTAATAAT 13 5\\n\', ""), (\'\', [\n        [\'TATATATATATATATA__\', \'TATATATAT__ATATAAT\', \'TAT__ATATATATATAAT\', \'TATATAT__ATATATAAT\', \'__TATATTAATATATAAT\',\n         \'TATA__TTAATATATAAT\', \'TA__TATTAATATATAAT\', \'TAATTATTAATAT__AAT\', \'TAATTATTAAT__ATAAT\', \'TAATTATTAATAAAT__T\',\n         \'TAATTATTAATA__TAAT\', \'TAATTAT__ATATATAAT\', \'TAATTATTAATA__TAAT\', \'TAATTAT__ATATATAAT\', \'TAATTATAAATATAT__T\',\n         \'TAATTATAAAT__ATATT\', \'TAATTA__AATTAATATT\']], None, \'\', \'012345678901234567\\nTAATTA__AATTAATATT 10 16\\n\', ""),\n          (\'\',\n           [[\n                \'TATATATATATATATA__\',\n                \'TATATAT__ATATATAAT\',\n                \'TATAT__ATATATATAAT\',\n                \'TA__TTAATATATATAAT\',\n                \'TATATTAATATATA__AT\',\n                \'TATATTAATATATAAT__\',\n                \'TATATTAAT__ATAATAT\',\n                \'TATATTA__ATATAATAT\',\n                \'TATATTATAATA__ATAT\',\n                \'TATATTATAATAATAT__\',\n                \'TATAT__TAATAATATTA\',\n                \'TATATTTTAATAATA__A\',\n                \'TATATTTTAATAA__TAA\',\n                \'TATATTT__ATAATATAA\',\n                \'TATATTTAAATAATAT__\',\n                \'TATATTTA__TAATATAA\',\n                \'TATA__TATTTAATATAA\',\n                \'TATATATATTTAA__TAA\',\n                \'TATATAT__TTAAATTAA\',\n                \'TATATATAATTAAATT__\']],\n           None,\n           \'\',\n           \'012345678901234567\\nTATATATAATTAAATT__ 11 19\\n\',\n           ""),\n          (\'\', [\n              [\'TATATATATATATATA__\', \'TATATA__TATATATATA\', \'TATATAATT__ATATATA\', \'TAT__AATTATATATATA\',\n               \'TATATAATTAT__ATATA\',\n               \'TATATAATT__ATATATA\', \'T__ATAATTATATATATA\', \'TTAATAATTATATA__TA\', \'TTAATAA__ATATATTTA\',\n               \'TTAATAAATATAT__TTA\',\n               \'TTAATAAATAT__ATTTA\', \'TTAATAAATATTTA__TA\', \'TTAATAAATATTTATA__\', \'TTAATAAATATT__TATA\',\n               \'TTAATAAATATTTATA__\',\n               \'TTAAT__ATATTTATAAA\', \'TTAATAT__ATTTATAAA\', \'TTAATATTTAT__ATAAA\', \'TTAA__TTTATTAATAAA\',\n               \'TTAATATT__TTAATAAA\',\n               \'TTAA__TTTATTAATAAA\', \'TTAATT__TATTAATAAA\', \'T__ATTTATATTAATAAA\', \'TTTATTTATA__AATAAA\',\n               \'TTTATTTATAAAAATA__\',\n               \'TTTATT__TAAAAATATA\', \'TTT__TATTAAAAATATA\', \'T__TTTATTAAAAATATA\', \'TTTT__ATTAAAAATATA\',\n               \'TT__TTATTAAAAATATA\',\n               \'TTTATTATTAAAAA__TA\', \'TTTATTAT__AAAATATA\', \'TTTATTATTAAAAATA__\']], None, \'\',\n           \'012345678901234567\\nTTTATTATTAAAAATA__ 8 32\\n\', ""), (\'\', [\n            [\'TATATATATATATATA__\', \'TATATATATATA__TATA\', \'TATATA__TATATATATA\', \'TATATAATTATATAT__A\',\n             \'TATAT__TTATATATAAA\',\n             \'TATATATTTATAT__AAA\', \'TATATATTT__ATATAAA\', \'TATATATTTAAATAT__A\', \'TATATA__TAAATATTTA\',\n             \'TATA__TATAAATATTTA\',\n             \'TATAAATATA__TATTTA\', \'TATAAAT__AATTATTTA\', \'TATAA__ATAATTATTTA\', \'TATAATTATAATTA__TA\',\n             \'TATAA__ATAATTATTTA\',\n             \'TATAATTATAATTA__TA\', \'TATAATTA__ATTATATA\', \'TATAAT__TAATTATATA\', \'TATAATATTAATTAT__A\',\n             \'TATAAT__TAATTATATA\',\n             \'TATAATTATAAT__TATA\', \'TATAATTA__ATTATATA\', \'TATAATTATTA__ATATA\', \'TATAATTATTAATAT__A\',\n             \'TATAATTATTA__ATATA\',\n             \'TATAA__ATTATTATATA\', \'T__AAATATTATTATATA\', \'TATAAATATT__TATATA\', \'TATA__TATTAATATATA\',\n             \'TATAATT__TAATATATA\',\n             \'TATA__TATTAATATATA\', \'TATAATTATTAAT__ATA\', \'TATA__TATTAATATATA\', \'__TATATATTAATATATA\',\n             \'TA__TATATTAATATATA\',\n             \'TATATATATTAATATA__\', \'TA__TATATTAATATATA\', \'__TATATATTAATATATA\', \'TATATA__TTAATATATA\',\n             \'TATATAATTTA__ATATA\',\n             \'__TATAATTTATAATATA\', \'TTTATAAT__ATAATATA\', \'TTTATA__ATATAATATA\', \'TTTATAATAT__AATATA\',\n             \'TTTATAA__TTAAATATA\',\n             \'TTTATAATAT__AATATA\', \'TTTATAA__TTAAATATA\', \'TTTATAAATTTAA__ATA\', \'TTTATAAATT__ATAATA\',\n             \'TTTA__AATTTAATAATA\']],\n                                                                  None, \'\',\n                                                                  \'012345678901234567\\nTTTA__AATTTAATAATA 9 49\\n\',\n                                                                  ""), (\'\', [\n            [\'TATATATATATATATA__\', \'TATATA__TATATATATA\', \'TATATAATT__ATATATA\', \'TATATAATTTAATA__TA\',\n             \'TATATAATTTAA__TATA\',\n             \'TA__TAATTTAATATATA\', \'TAATTAATTTAATAT__A\', \'TAATT__TTTAATATAAA\', \'TAATTAATTTAATATA__\',\n             \'TAAT__ATTTAATATATA\',\n             \'TAATTAATTTAATA__TA\', \'TAA__AATTTAATATTTA\', \'TAAAAAATTT__TATTTA\', \'TA__AAATTTAATATTTA\',\n             \'TATTAAATTTAATAT__A\',\n             \'TATTAA__TTAATATATA\', \'TA__AATTTTAATATATA\', \'TAATAATTTTAAT__ATA\', \'TAATAATTTTA__ATATA\',\n             \'TAATAATTTTAATAT__A\',\n             \'TAATAATT__AATATTTA\', \'TAAT__TTAAAATATTTA\', \'TAATAATTAA__TATTTA\', \'TAATA__TAAATTATTTA\',\n             \'TAATATTTAAATTA__TA\',\n             \'TAA__TTTAAATTATATA\', \'TAATATTTAAAT__TATA\', \'TAATATTTAAATATT__A\', \'TAATATTTA__TATTAAA\',\n             \'TAATAT__ATTTATTAAA\',\n             \'TAAT__ATATTTATTAAA\', \'TAATTTATATTTA__AAA\', \'TAATTTATATTTAAA__A\', \'TAATTTATATTTA__AAA\',\n             \'TAATTTATATT__TAAAA\',\n             \'TAATTTATATTTA__AAA\', \'TAA__TATATTTATTAAA\', \'__ATATATATTTATTAAA\', \'ATATATATATTT__TAAA\',\n             \'ATATATATATTTAAT__A\',\n             \'AT__ATATATTTAATATA\', \'ATTAATATATT__ATATA\', \'ATTAATA__TTTAATATA\', \'ATTAATAATTTTAAT__A\',\n             \'ATTAATAATTT__ATTAA\',\n             \'ATTAATAATTTAAATT__\', \'ATT__TAATTTAAATTAA\', \'ATTAATAATTTAAATT__\', \'ATTAATAATTTAAA__TT\',\n             \'ATTAATAAT__AAATTTT\']],\n                                                                        None, \'\',\n                                                                        \'012345678901234567\\nATTAATAAT__AAATTTT 8 49\\n\',\n                                                                        ""), (\'\', [\n            [\'TATATATATATATATA__\', \'TATATA__TATATATATA\', \'TATATAATT__ATATATA\', \'TATATAATTTAATA__TA\',\n             \'TATATAATTT__TAAATA\',\n             \'TATATAA__TTTTAAATA\', \'TATATAAATTTTTAA__A\', \'TATATAAATTT__AATTA\', \'TATATAAATTTAA__TTA\',\n             \'TATATAAATT__ATATTA\',\n             \'TATATAAA__TTATATTA\', \'TATA__AATATTATATTA\', \'TATATTAATATTATA__A\', \'TATAT__ATATTATATAA\',\n             \'T__ATATATATTATATAA\',\n             \'TATATATATATT__ATAA\', \'TATAT__ATATTATATAA\', \'TATATTAA__TTATATAA\', \'TAT__TAAATTTATATAA\',\n             \'TATATTAA__TTATATAA\',\n             \'TATATTAAATTT__ATAA\', \'TATAT__AATTTTAATAA\', \'TA__TTAAATTTTAATAA\', \'TATATTAAATTTTAA__A\',\n             \'TATATTA__TTTTAAAAA\',\n             \'TATAT__TATTTTAAAAA\', \'TA__TTATATTTTAAAAA\', \'TAAATTATATTTTAA__A\', \'TAAATTATAT__TAATTA\',\n             \'TAAATTAT__ATTAATTA\',\n             \'TAA__TATATATTAATTA\', \'TAATATATATAT__ATTA\', \'TAATA__TATATTAATTA\', \'TAATATATA__TTAATTA\',\n             \'TAATATATATTTTAA__A\',\n             \'TAA__TATATTTTAATAA\', \'TAAATTAT__TTTAATAA\', \'TA__TTATAATTTAATAA\', \'TATT__ATAATTTAATAA\',\n             \'TATTTAATAATT__ATAA\',\n             \'__TTTAATAATTTAATAA\', \'TATTTAATAATT__ATAA\', \'TATTT__TAATTAAATAA\', \'__TTTTATAATTAAATAA\',\n             \'AATTTTATAATTAAAT__\',\n             \'AAT__TATAATTAAATTT\', \'AATAATATAATT__ATTT\', \'AATA__ATAATTATATTT\', \'AATAAAAT__TTATATTT\',\n             \'AATAAAATTTTTATA__T\',\n             \'AATAAAATTTTT__AATT\', \'AAT__AATTTTTAAAATT\', \'AATTTAAT__TTAAAATT\', \'AATTTAATAATT__AATT\',\n             \'A__TTAATAATTATAATT\']],\n                                                                              None, \'\',\n                                                                              \'012345678901234567\\nA__TTAATAATTATAATT 10 54\\n\',\n                                                                              ""), (\'\', [\n            [\'TATATATATATATATA__\', \'TAT__ATATATATATAAT\', \'TATATATATATATATA__\', \'TATATATAT__ATATAAT\',\n             \'TAT__ATATATATATAAT\',\n             \'T__ATATATATATATAAT\', \'TTAATATATATATA__AT\', \'TTAATATATATA__TAAT\', \'TTAATATA__TATATAAT\',\n             \'TT__TATAAATATATAAT\',\n             \'TTATTATAA__ATATAAT\', \'TT__TATAAATATATAAT\', \'TTATTATAA__ATATAAT\', \'TTATTATAAATATATA__\',\n             \'TTATTATAAAT__ATAAT\',\n             \'TTATTATAAATATATA__\', \'TTATT__AAATATATAAT\', \'TTATTAA__ATATATAAT\', \'TTATTAAATAT__ATAAT\',\n             \'TTATTAAA__TTAATAAT\',\n             \'TTATTAAATT__AATAAT\', \'TTATTAAA__TTAATAAT\', \'TTATTAAAAATT__TAAT\', \'TTATTAAAAATTAAT__T\',\n             \'TTATTAAAAAT__ATTAT\',\n             \'TTATTAAAAATAT__TAT\', \'__ATTAAAAATATTTTAT\', \'TAATTAAAAA__TTTTAT\', \'TAA__AAAAATTTTTTAT\',\n             \'TAATAAAAAATTTTT__T\',\n             \'__ATAAAAAATTTTTTAT\', \'ATATAAAAA__TTTTTAT\', \'AT__AAAAAATTTTTTAT\', \'ATTTAAAAAAT__TTTAT\',\n             \'ATTTAAAAAATTTT__AT\',\n             \'ATT__AAAAATTTTTAAT\', \'ATTAAAA__ATTTTTAAT\', \'ATTAAAATTATT__TAAT\', \'ATTAAAATT__TATTAAT\',\n             \'ATTAAAATTAATATT__T\',\n             \'AT__AAATTAATATTTAT\', \'ATATAA__TAATATTTAT\', \'__ATAAATTAATATTTAT\', \'AAATA__TTAATATTTAT\',\n             \'A__TAAATTAATATTTAT\',\n             \'ATATAAATTAATATT__T\', \'ATATAAAT__ATATTTAT\', \'ATATAAATTAATATT__T\', \'__ATAAATTAATATTATT\',\n             \'ATATAAATTA__ATTATT\',\n             \'ATATA__TTAAAATTATT\', \'ATATATATTAAAAT__TT\', \'__ATATATTAAAATATTT\', \'AAATATATT__AATATTT\',\n             \'AAATATATTATAAT__TT\',\n             \'AAATATATT__AATATTT\', \'A__TATATTAAAATATTT\', \'ATTTATA__AAAATATTT\', \'ATTT__AATAAAATATTT\',\n             \'ATTTTAAATAAAA__TTT\',\n             \'A__TTAAATAAAATTTTT\', \'AAATTAAAT__AATTTTT\', \'AAATTAA__ATAATTTTT\', \'AA__TAAATATAATTTTT\',\n             \'AAATTAAAT__AATTTTT\',\n             \'AAA__AAATTTAATTTTT\']], None, \'\', \'012345678901234567\\nAAA__AAATTTAATTTTT 5 65\\n\', ""), (\'\', [\n            [\'TATATATATATATATA__\', \'TA__TATATATATATATA\', \'TATATATATA__TATATA\', \'TATATATATAATT__ATA\',\n             \'TATATA__TAATTTAATA\',\n             \'__TATATATAATTTAATA\', \'TATATA__TAATTTAATA\', \'TATATATATAATTTAA__\', \'TATATATATA__TTAAAT\',\n             \'TA__TATATATATTAAAT\',\n             \'TATATATA__TATTAAAT\', \'TATATATAAATATTA__T\', \'TATA__TAAATATTATAT\', \'TATATA__AATATTATAT\',\n             \'TAT__AATAATATTATAT\',\n             \'TATTAAA__ATATTATAT\', \'TATT__AAAATATTATAT\', \'TATTTAAAAATATTA__T\', \'TATTT__AAATATTAAAT\',\n             \'TATTTTAAAATAT__AAT\',\n             \'TATTTTAA__TATAAAAT\', \'TATTTTAATATA__AAAT\', \'__TTTTAATATATAAAAT\', \'ATTTTTAATATATAAA__\',\n             \'ATTTTTAA__TATAAATA\',\n             \'ATTTTTAATATA__AATA\', \'AT__TTAATATATTAATA\', \'ATATTTA__ATATTAATA\', \'ATATTTATAATATTAA__\',\n             \'ATATTT__AATATTAAAT\',\n             \'A__TTTTAAATATTAAAT\', \'AAATTTTAAATATT__AT\', \'AAA__TTAAATATTTTAT\', \'AAATATTAAA__TTTTAT\',\n             \'AAATATT__AAATTTTAT\',\n             \'AAAT__TATAAATTTTAT\', \'AAATTTTATAAAT__TAT\', \'AAA__TTATAAATTTTAT\', \'AAAATTT__AAATTTTAT\',\n             \'A__ATTTAAAAATTTTAT\',\n             \'ATTATTTAAAAA__TTAT\', \'ATTATTTAAAAAATTT__\', \'ATTAT__AAAAAATTTTT\', \'A__ATTTAAAAAATTTTT\',\n             \'ATAATT__AAAAATTTTT\',\n             \'ATAATTAA__AAATTTTT\', \'ATAATTAAAA__ATTTTT\', \'AT__TTAAAAAAATTTTT\', \'ATAATTAA__AAATTTTT\',\n             \'ATAATTAAAA__ATTTTT\',\n             \'ATAA__AAAATTATTTTT\', \'ATAATTAAAATTA__TTT\', \'AT__TTAAAATTAAATTT\', \'ATTT__AAAATTAAATTT\',\n             \'AT__TTAAAATTAAATTT\',\n             \'ATAATTA__ATTAAATTT\', \'A__ATTATAATTAAATTT\', \'AAAATTATAATTA__TTT\', \'AAA__TATAATTAATTTT\',\n             \'AAAATTATAATTA__TTT\',\n             \'AAAATTAT__TTAAATTT\', \'AAAATTATAATTA__TTT\', \'AAAATTATA__TAATTTT\', \'AAAATTATATTTAATT__\',\n             \'AAAA__ATATTTAATTTT\',\n             \'AAAATAA__TTTAATTTT\', \'AAAATAATTTTTAATT__\', \'AAAATAATTTTTAA__TT\', \'AAAATAATTTT__ATATT\',\n             \'AAAA__ATTTTTAATATT\',\n             \'AAAATAATTTTTAA__TT\', \'AAAATAATTTT__ATATT\', \'AAAA__ATTTTTAATATT\', \'AAAATTATT__TAATATT\',\n             \'AAAATTATTATTAAT__T\',\n             \'AAAA__ATTATTAATTTT\', \'AAAAATATT__TAATTTT\', \'AAAAATATTTTTAATT__\', \'AAAAAT__TTTTAATTAT\',\n             \'AAAAATATTTTTAATT__\',\n             \'AAAAATAT__TTAATTTT\', \'AAAAATATTTTTAATT__\', \'AAAAATATTTT__ATTTA\', \'AAAAATATTTTTTAT__A\',\n             \'AAAAA__TTTTTTATTAA\',\n             \'AAAAATTTTTT__ATTAA\', \'AAAAATTTTTTTAAT__A\', \'AA__ATTTTTTTAATAAA\', \'__AAATTTTTTTAATAAA\',\n             \'TAAAATTTTTT__ATAAA\',\n             \'TAAAATTTTTTAAATA__\', \'TAAAATT__TTAAATATT\', \'TAAAATTTTTTAAATA__\', \'TAAAAT__TTTAAATATT\',\n             \'__AAATTATTTAAATATT\',\n             \'TAAAAT__TTTAAATATT\', \'TAAAATTATT__AATATT\', \'TAAAAT__TTTAAATATT\', \'TAA__TAATTTAAATATT\',\n             \'TAAATTAATTTAAAT__T\']],\n                                                                                                      None, \'\',\n                                                                                                      \'012345678901234567\\nTAAATTAATTTAAAT__T 8 99\\n\',\n                                                                                                      "")]\n\n    current_states_no_title += cs[:3]\n\n\n    def show_current_state_test_formatter(data):\n        states = data[\'args\'][0]\n        moves = len(states) - 1\n        state = states[-1]\n        return "Moves: {moves:>2} Final: {state} {title}".format(state=state, moves=moves, title=data[\'title\'])\n\n\n    def tuple_to_dict(tuple, *keys):\n        res = {}\n\n        for key, elem in zip(keys, tuple):\n            res[key] = elem\n\n        return res\n\n    current_states = [tuple_to_dict(cs, \'title\', \'args\', \'result\', \'stdin\', \'stdout\', \'stderr\') for cs in\n                      current_states_no_title]\n    title_tests(current_states, \'show_current_state\', show_current_state_test_formatter)\n\n    #current_states = title_tests(current_states_no_title, "show_current_state", show_current_state_test_formatter)\n\n    ################################################################################\n    #                                   interact                                   #\n    ################################################################################\n\n    INTERACT_SPEC_STDIN = "8\\n1\\n15\\nb\\n6\\nq\\n"\n\n    INTERACT_SPEC_STDOUT = """How many supporters from each team? 012345678901234567\nTATATATATATATATA__ 16 0\n? 012345678901234567\nT__ATATATATATATAAT 15 1\n? 012345678901234567\nTAAATATATATATAT__T 14 2\n? 012345678901234567\nT__ATATATATATATAAT 15 1\n? 012345678901234567\nTTAATA__TATATATAAT 13 2\n? """\n\n    interactions = [\n        {\n            "title": "Sample from Specification",\n            "stdin": INTERACT_SPEC_STDIN,\n            "stdout": INTERACT_SPEC_STDOUT\n        },\n        {\n            "title": "Immediate Quit",\n            "stdin": "20\\nq\\n",\n            "stdout": """How many supporters from each team? 012345678901234567890123456789012345678901\nTATATATATATATATATATATATATATATATATATATATA__ 40 0\n? """\n        },\n        {\n            "title": "Simple Moves",\n            "stdin": "20\\n0\\n2\\n4\\n6\\n8\\n10\\nq",\n            "stdout": """How many supporters from each team? 012345678901234567890123456789012345678901\nTATATATATATATATATATATATATATATATATATATATA__ 40 0\n? 012345678901234567890123456789012345678901\n__TATATATATATATATATATATATATATATATATATATATA 40 1\n? 012345678901234567890123456789012345678901\nTA__TATATATATATATATATATATATATATATATATATATA 40 2\n? 012345678901234567890123456789012345678901\nTATA__TATATATATATATATATATATATATATATATATATA 40 3\n? 012345678901234567890123456789012345678901\nTATATA__TATATATATATATATATATATATATATATATATA 40 4\n? 012345678901234567890123456789012345678901\nTATATATA__TATATATATATATATATATATATATATATATA 40 5\n? 012345678901234567890123456789012345678901\nTATATATATA__TATATATATATATATATATATATATATATA 40 6\n? """\n        },\n        {\n            "title": "Back Once",\n            "stdin": "20\\n0\\n2\\n4\\n6\\n8\\n10\\nb\\nq",\n            "stdout": """How many supporters from each team? 012345678901234567890123456789012345678901\nTATATATATATATATATATATATATATATATATATATATA__ 40 0\n? 012345678901234567890123456789012345678901\n__TATATATATATATATATATATATATATATATATATATATA 40 1\n? 012345678901234567890123456789012345678901\nTA__TATATATATATATATATATATATATATATATATATATA 40 2\n? 012345678901234567890123456789012345678901\nTATA__TATATATATATATATATATATATATATATATATATA 40 3\n? 012345678901234567890123456789012345678901\nTATATA__TATATATATATATATATATATATATATATATATA 40 4\n? 012345678901234567890123456789012345678901\nTATATATA__TATATATATATATATATATATATATATATATA 40 5\n? 012345678901234567890123456789012345678901\nTATATATATA__TATATATATATATATATATATATATATATA 40 6\n? 012345678901234567890123456789012345678901\nTATATATA__TATATATATATATATATATATATATATATATA 40 5\n? """\n        },\n        {\n            "title": "Back Twice",\n            "stdin": "20\\n0\\n2\\n4\\n6\\n8\\n10\\nb\\nb\\nq",\n            "stdout": """How many supporters from each team? 012345678901234567890123456789012345678901\nTATATATATATATATATATATATATATATATATATATATA__ 40 0\n? 012345678901234567890123456789012345678901\n__TATATATATATATATATATATATATATATATATATATATA 40 1\n? 012345678901234567890123456789012345678901\nTA__TATATATATATATATATATATATATATATATATATATA 40 2\n? 012345678901234567890123456789012345678901\nTATA__TATATATATATATATATATATATATATATATATATA 40 3\n? 012345678901234567890123456789012345678901\nTATATA__TATATATATATATATATATATATATATATATATA 40 4\n? 012345678901234567890123456789012345678901\nTATATATA__TATATATATATATATATATATATATATATATA 40 5\n? 012345678901234567890123456789012345678901\nTATATATATA__TATATATATATATATATATATATATATATA 40 6\n? 012345678901234567890123456789012345678901\nTATATATA__TATATATATATATATATATATATATATATATA 40 5\n? 012345678901234567890123456789012345678901\nTATATA__TATATATATATATATATATATATATATATATATA 40 4\n? """\n        },\n        {\n            "title": "Back Six Times",\n            "stdin": "20\\n0\\n2\\n4\\n6\\n8\\n10\\nb\\nb\\nb\\nb\\nb\\nb\\nq",\n            "stdout": """How many supporters from each team? 012345678901234567890123456789012345678901\nTATATATATATATATATATATATATATATATATATATATA__ 40 0\n? 012345678901234567890123456789012345678901\n__TATATATATATATATATATATATATATATATATATATATA 40 1\n? 012345678901234567890123456789012345678901\nTA__TATATATATATATATATATATATATATATATATATATA 40 2\n? 012345678901234567890123456789012345678901\nTATA__TATATATATATATATATATATATATATATATATATA 40 3\n? 012345678901234567890123456789012345678901\nTATATA__TATATATATATATATATATATATATATATATATA 40 4\n? 012345678901234567890123456789012345678901\nTATATATA__TATATATATATATATATATATATATATATATA 40 5\n? 012345678901234567890123456789012345678901\nTATATATATA__TATATATATATATATATATATATATATATA 40 6\n? 012345678901234567890123456789012345678901\nTATATATA__TATATATATATATATATATATATATATATATA 40 5\n? 012345678901234567890123456789012345678901\nTATATA__TATATATATATATATATATATATATATATATATA 40 4\n? 012345678901234567890123456789012345678901\nTATA__TATATATATATATATATATATATATATATATATATA 40 3\n? 012345678901234567890123456789012345678901\nTA__TATATATATATATATATATATATATATATATATATATA 40 2\n? 012345678901234567890123456789012345678901\n__TATATATATATATATATATATATATATATATATATATATA 40 1\n? 012345678901234567890123456789012345678901\nTATATATATATATATATATATATATATATATATATATATA__ 40 0\n? """\n        },\n        {\n            "title": "Solved Puzzle",\n            "stdin": "".join([str(i) + "\\n" for i in [5, 3, 6, 9, 2, 0, 6, 1, 5, "b", 5, 0, "q"]]),\n            "stdout": """How many supporters from each team? 012345678901\nTATATATATA__ 10 0\n? 012345678901\nTAT__ATATAAT 9 1\n? 012345678901\nTATTAA__TAAT 7 2\n? 012345678901\nTATTAAAAT__T 6 3\n? 012345678901\nTA__AAAATTTT 4 4\n? 012345678901\n__TAAAAATTTT 3 5\n? 012345678901\nAATAAA__TTTT 4 6\n? 012345678901\nA__AAAATTTTT 3 7\n? 012345678901\nAAAAA__TTTTT 2 8\n? 012345678901\nA__AAAATTTTT 3 7\n? 012345678901\nAAAAA__TTTTT 2 8\n? 012345678901\n__AAAAATTTTT 2 9\n? """\n        }\n    ]\n\n    histories = [(\n                     \'8\\n11\\nb\\n10\\nb\\n1\\n6\\nb\\n7\\n3\\n1\\n14\\nb\\n14\\n11\\n3\\n14\\n5\\nb\\n4\\n9\\nb\\n9\\n1\\n13\\n5\\n9\\nb\\n9\\n11\\n4\\nb\\n7\\n14\\n11\\n14\\nb\\n14\\n1\\n6\\n3\\nq\\n\',\n                     \'How many supporters from each team? 012345678901234567\\nTATATATATATATATA__ 16 0\\n? 012345678901234567\\nTATATATATAT__ATAAT 15 1\\n? 012345678901234567\\nTATATATATATATATA__ 16 0\\n? 012345678901234567\\nTATATATATA__TATATA 16 1\\n? 012345678901234567\\nTATATATATATATATA__ 16 0\\n? 012345678901234567\\nT__ATATATATATATAAT 15 1\\n? 012345678901234567\\nTTAATA__TATATATAAT 13 2\\n? 012345678901234567\\nT__ATATATATATATAAT 15 1\\n? 012345678901234567\\nTATATAT__ATATATAAT 15 2\\n? 012345678901234567\\nTAT__ATATATATATAAT 15 3\\n? 012345678901234567\\nT__ATATATATATATAAT 15 4\\n? 012345678901234567\\nTTAATATATATATA__AT 14 5\\n? 012345678901234567\\nT__ATATATATATATAAT 15 4\\n? 012345678901234567\\nTTAATATATATATA__AT 14 5\\n? 012345678901234567\\nTTAATATATAT__AATAT 13 6\\n? 012345678901234567\\nTTA__ATATATATAATAT 14 7\\n? 012345678901234567\\nTTAATATATATATA__AT 14 8\\n? 012345678901234567\\nTTAAT__ATATATAATAT 13 9\\n? 012345678901234567\\nTTAATATATATATA__AT 14 8\\n? 012345678901234567\\nTTAA__TATATATATAAT 13 9\\n? 012345678901234567\\nTTAAATTAT__ATATAAT 11 10\\n? 012345678901234567\\nTTAA__TATATATATAAT 13 9\\n? 012345678901234567\\nTTAAATTAT__ATATAAT 11 10\\n? 012345678901234567\\nT__AATTATTAATATAAT 11 11\\n? 012345678901234567\\nTATAATTATTAAT__AAT 11 12\\n? 012345678901234567\\nTATAA__ATTAATTTAAT 10 13\\n? 012345678901234567\\nTATAATAAT__ATTTAAT 11 14\\n? 012345678901234567\\nTATAA__ATTAATTTAAT 10 13\\n? 012345678901234567\\nTATAATAAT__ATTTAAT 11 14\\n? 012345678901234567\\nTATAATAATAT__TTAAT 12 15\\n? 012345678901234567\\nTATA__AATATATTTAAT 12 16\\n? 012345678901234567\\nTATAATAATAT__TTAAT 12 15\\n? 012345678901234567\\nTATAATA__ATATTTAAT 12 16\\n? 012345678901234567\\nTATAATATAATATT__AT 13 17\\n? 012345678901234567\\nTATAATATAAT__TATAT 14 18\\n? 012345678901234567\\nTATAATATAATATT__AT 13 19\\n? 012345678901234567\\nTATAATATAAT__TATAT 14 18\\n? 012345678901234567\\nTATAATATAATATT__AT 13 19\\n? 012345678901234567\\nT__AATATAATATTATAT 13 20\\n? 012345678901234567\\nTATAAT__AATATTATAT 13 21\\n? 012345678901234567\\nTAT__TAAAATATTATAT 12 22\\n? \'),\n                 (\n                     \'8\\n5\\n9\\n4\\n6\\nb\\n6\\nb\\n16\\nb\\n2\\nb\\nb\\n7\\nb\\n14\\n4\\n2\\nb\\n0\\nb\\n9\\n11\\n9\\n15\\n0\\nb\\nb\\nb\\nb\\nb\\nb\\nb\\nb\\nb\\n4\\n2\\n11\\nb\\n5\\n7\\nq\\n\',\n                     \'How many supporters from each team? 012345678901234567\\nTATATATATATATATA__ 16 0\\n? 012345678901234567\\nTATAT__ATATATATAAT 15 1\\n? 012345678901234567\\nTATATATAT__ATATAAT 15 2\\n? 012345678901234567\\nTATA__TATTAATATAAT 13 3\\n? 012345678901234567\\nTATATA__TTAATATAAT 13 4\\n? 012345678901234567\\nTATA__TATTAATATAAT 13 3\\n? 012345678901234567\\nTATATA__TTAATATAAT 13 4\\n? 012345678901234567\\nTATA__TATTAATATAAT 13 3\\n? 012345678901234567\\nTATAATTATTAATATA__ 12 4\\n? 012345678901234567\\nTATA__TATTAATATAAT 13 3\\n? 012345678901234567\\nTA__TATATTAATATAAT 13 4\\n? 012345678901234567\\nTATA__TATTAATATAAT 13 3\\n? 012345678901234567\\nTATATATAT__ATATAAT 15 2\\n? 012345678901234567\\nTATATAT__ATATATAAT 15 3\\n? 012345678901234567\\nTATATATAT__ATATAAT 15 2\\n? 012345678901234567\\nTATATATATTAATA__AT 14 3\\n? 012345678901234567\\nTATA__TATTAATATAAT 13 4\\n? 012345678901234567\\nTA__TATATTAATATAAT 13 5\\n? 012345678901234567\\nTATA__TATTAATATAAT 13 4\\n? 012345678901234567\\n__TATATATTAATATAAT 13 5\\n? 012345678901234567\\nTATA__TATTAATATAAT 13 4\\n? 012345678901234567\\nTATATATAT__ATATAAT 15 5\\n? 012345678901234567\\nTATATATATAT__ATAAT 15 6\\n? 012345678901234567\\nTATATATAT__ATATAAT 15 7\\n? 012345678901234567\\nTATATATATAAATAT__T 14 8\\n? 012345678901234567\\n__TATATATAAATATTAT 13 9\\n? 012345678901234567\\nTATATATATAAATAT__T 14 8\\n? 012345678901234567\\nTATATATAT__ATATAAT 15 7\\n? 012345678901234567\\nTATATATATAT__ATAAT 15 6\\n? 012345678901234567\\nTATATATAT__ATATAAT 15 5\\n? 012345678901234567\\nTATA__TATTAATATAAT 13 4\\n? 012345678901234567\\nTATATATATTAATA__AT 14 3\\n? 012345678901234567\\nTATATATAT__ATATAAT 15 2\\n? 012345678901234567\\nTATAT__ATATATATAAT 15 1\\n? 012345678901234567\\nTATATATATATATATA__ 16 0\\n? 012345678901234567\\nTATA__TATATATATATA 16 1\\n? 012345678901234567\\nTA__TATATATATATATA 16 2\\n? 012345678901234567\\nTAATTATATAT__ATATA 14 3\\n? 012345678901234567\\nTA__TATATATATATATA 16 2\\n? 012345678901234567\\nTAATT__ATATATATATA 14 3\\n? 012345678901234567\\nTAATTAT__ATATATATA 14 4\\n? \'),\n                 (\n                     \'8\\n6\\n16\\nb\\n12\\n14\\n4\\nb\\n4\\nb\\n0\\n5\\nb\\n6\\n12\\n6\\n9\\n11\\nb\\nb\\n10\\n16\\nb\\n1\\n4\\nb\\nb\\n1\\nb\\n7\\nb\\n7\\n11\\nb\\n3\\n13\\nb\\n12\\n3\\n13\\n2\\nq\\n\',\n                     \'How many supporters from each team? 012345678901234567\\nTATATATATATATATA__ 16 0\\n? 012345678901234567\\nTATATA__TATATATATA 16 1\\n? 012345678901234567\\nTATATATATATATATA__ 16 2\\n? 012345678901234567\\nTATATA__TATATATATA 16 1\\n? 012345678901234567\\nTATATATATATA__TATA 16 2\\n? 012345678901234567\\nTATATATATATATA__TA 16 3\\n? 012345678901234567\\nTATA__TATATATATATA 16 4\\n? 012345678901234567\\nTATATATATATATA__TA 16 3\\n? 012345678901234567\\nTATA__TATATATATATA 16 4\\n? 012345678901234567\\nTATATATATATATA__TA 16 3\\n? 012345678901234567\\n__TATATATATATATATA 16 4\\n? 012345678901234567\\nATTAT__ATATATATATA 15 5\\n? 012345678901234567\\n__TATATATATATATATA 16 4\\n? 012345678901234567\\nTATATA__TATATATATA 16 5\\n? 012345678901234567\\nTATATATATATA__TATA 16 6\\n? 012345678901234567\\nTATATA__TATATATATA 16 7\\n? 012345678901234567\\nTATATAATT__ATATATA 14 8\\n? 012345678901234567\\nTATATAATTAT__ATATA 14 9\\n? 012345678901234567\\nTATATAATT__ATATATA 14 8\\n? 012345678901234567\\nTATATA__TATATATATA 16 7\\n? 012345678901234567\\nTATATATATA__TATATA 16 8\\n? 012345678901234567\\nTATATATATATATATA__ 16 9\\n? 012345678901234567\\nTATATATATA__TATATA 16 8\\n? 012345678901234567\\nT__ATATATAATTATATA 14 9\\n? 012345678901234567\\nTTAA__TATAATTATATA 12 10\\n? 012345678901234567\\nT__ATATATAATTATATA 14 9\\n? 012345678901234567\\nTATATATATA__TATATA 16 8\\n? 012345678901234567\\nT__ATATATAATTATATA 14 9\\n? 012345678901234567\\nTATATATATA__TATATA 16 8\\n? 012345678901234567\\nTATATAT__AATTATATA 14 9\\n? 012345678901234567\\nTATATATATA__TATATA 16 8\\n? 012345678901234567\\nTATATAT__AATTATATA 14 9\\n? 012345678901234567\\nTATATATTTAA__ATATA 13 10\\n? 012345678901234567\\nTATATAT__AATTATATA 14 9\\n? 012345678901234567\\nTAT__ATATAATTATATA 14 10\\n? 012345678901234567\\nTATATATATAATT__ATA 14 11\\n? 012345678901234567\\nTAT__ATATAATTATATA 14 10\\n? 012345678901234567\\nTATTAATATAAT__TATA 13 11\\n? 012345678901234567\\nTAT__ATATAATTATATA 14 12\\n? 012345678901234567\\nTATATATATAATT__ATA 14 13\\n? 012345678901234567\\nTA__TATATAATTTAATA 12 14\\n? \'),\n                 (\n                     \'8\\n14\\n0\\nb\\n5\\n8\\n14\\n8\\n2\\n15\\n12\\n14\\n8\\nb\\n8\\n10\\nb\\nb\\n6\\n11\\n3\\n12\\nb\\nb\\n2\\n10\\n14\\nb\\n6\\n10\\n14\\n5\\nb\\nb\\nb\\nb\\nb\\nb\\nb\\nb\\nb\\nq\\n\',\n                     \'How many supporters from each team? 012345678901234567\\nTATATATATATATATA__ 16 0\\n? 012345678901234567\\nTATATATATATATA__TA 16 1\\n? 012345678901234567\\n__TATATATATATATATA 16 2\\n? 012345678901234567\\nTATATATATATATA__TA 16 1\\n? 012345678901234567\\nTATAT__ATATATAATTA 14 2\\n? 012345678901234567\\nTATATTAA__TATAATTA 12 3\\n? 012345678901234567\\nTATATTAAATTATA__TA 12 4\\n? 012345678901234567\\nTATATTAA__TATAATTA 12 5\\n? 012345678901234567\\nTA__TTAATATATAATTA 12 6\\n? 012345678901234567\\nTATTTTAATATATAA__A 11 7\\n? 012345678901234567\\nTATTTTAATATA__ATAA 11 8\\n? 012345678901234567\\nTATTTTAATATAAT__AA 10 9\\n? 012345678901234567\\nTATTTTAA__TAATTAAA 8 10\\n? 012345678901234567\\nTATTTTAATATAAT__AA 10 9\\n? 012345678901234567\\nTATTTTAA__TAATTAAA 8 10\\n? 012345678901234567\\nTATTTTAATA__ATTAAA 9 11\\n? 012345678901234567\\nTATTTTAA__TAATTAAA 8 10\\n? 012345678901234567\\nTATTTTAATATAAT__AA 10 9\\n? 012345678901234567\\nTATTTT__TATAATAAAA 9 10\\n? 012345678901234567\\nTATTTTAATAT__TAAAA 9 11\\n? 012345678901234567\\nTAT__TAATATTTTAAAA 9 12\\n? 012345678901234567\\nTATTTTAATATT__AAAA 8 13\\n? 012345678901234567\\nTAT__TAATATTTTAAAA 9 12\\n? 012345678901234567\\nTATTTTAATAT__TAAAA 9 11\\n? 012345678901234567\\nTA__TTAATATTTTAAAA 8 12\\n? 012345678901234567\\nTATTTTAATA__TTAAAA 8 13\\n? 012345678901234567\\nTATTTTAATAAATT__AA 8 14\\n? 012345678901234567\\nTATTTTAATA__TTAAAA 8 13\\n? 012345678901234567\\nTATTTT__TAAATTAAAA 7 14\\n? 012345678901234567\\nTATTTTAATA__TTAAAA 8 15\\n? 012345678901234567\\nTATTTTAATAAATT__AA 8 16\\n? 012345678901234567\\nTATTT__ATAAATTTAAA 8 17\\n? 012345678901234567\\nTATTTTAATAAATT__AA 8 16\\n? 012345678901234567\\nTATTTTAATA__TTAAAA 8 15\\n? 012345678901234567\\nTATTTT__TAAATTAAAA 7 14\\n? 012345678901234567\\nTATTTTAATA__TTAAAA 8 13\\n? 012345678901234567\\nTA__TTAATATTTTAAAA 8 12\\n? 012345678901234567\\nTATTTTAATAT__TAAAA 9 11\\n? 012345678901234567\\nTATTTT__TATAATAAAA 9 10\\n? 012345678901234567\\nTATTTTAATATAAT__AA 10 9\\n? 012345678901234567\\nTATTTTAATATA__ATAA 11 8\\n? \'),\n                 (\n                     \'8\\n2\\nb\\n11\\nb\\n10\\n7\\n15\\n9\\nb\\nb\\nb\\n7\\n3\\n5\\n1\\n13\\nb\\n11\\n5\\n14\\n8\\n5\\n2\\n5\\nb\\nb\\n12\\n10\\nb\\n2\\n11\\n1\\nb\\n3\\n5\\n11\\n1\\n12\\n10\\n16\\nq\\n\',\n                     \'How many supporters from each team? 012345678901234567\\nTATATATATATATATA__ 16 0\\n? 012345678901234567\\nTA__TATATATATATATA 16 1\\n? 012345678901234567\\nTATATATATATATATA__ 16 0\\n? 012345678901234567\\nTATATATATAT__ATAAT 15 1\\n? 012345678901234567\\nTATATATATATATATA__ 16 0\\n? 012345678901234567\\nTATATATATA__TATATA 16 1\\n? 012345678901234567\\nTATATAT__AATTATATA 14 2\\n? 012345678901234567\\nTATATATATAATTAT__A 14 3\\n? 012345678901234567\\nTATATATAT__TTATAAA 13 4\\n? 012345678901234567\\nTATATATATAATTAT__A 14 3\\n? 012345678901234567\\nTATATAT__AATTATATA 14 2\\n? 012345678901234567\\nTATATATATA__TATATA 16 1\\n? 012345678901234567\\nTATATAT__AATTATATA 14 2\\n? 012345678901234567\\nTAT__ATATAATTATATA 14 3\\n? 012345678901234567\\nTATAT__ATAATTATATA 14 4\\n? 012345678901234567\\nT__ATATATAATTATATA 14 5\\n? 012345678901234567\\nTATATATATAATT__ATA 14 6\\n? 012345678901234567\\nT__ATATATAATTATATA 14 5\\n? 012345678901234567\\nTTTATATATAA__ATATA 13 6\\n? 012345678901234567\\nTTTAT__ATAAATATATA 12 7\\n? 012345678901234567\\nTTTATTAATAAATA__TA 10 8\\n? 012345678901234567\\nTTTATTAA__AATATATA 11 9\\n? 012345678901234567\\nTTTAT__ATAAATATATA 12 10\\n? 012345678901234567\\nTT__TTAATAAATATATA 11 11\\n? 012345678901234567\\nTTTAT__ATAAATATATA 12 12\\n? 012345678901234567\\nTT__TTAATAAATATATA 11 11\\n? 012345678901234567\\nTTTAT__ATAAATATATA 12 10\\n? 012345678901234567\\nTTTATTAATAAA__TATA 10 11\\n? 012345678901234567\\nTTTATTAATA__AATATA 11 12\\n? 012345678901234567\\nTTTATTAATAAA__TATA 10 11\\n? 012345678901234567\\nTT__TTAATAAATATATA 11 12\\n? 012345678901234567\\nTTATTTAATAA__ATATA 11 13\\n? 012345678901234567\\nT__TTTAATAATAATATA 11 14\\n? 012345678901234567\\nTTATTTAATAA__ATATA 11 13\\n? 012345678901234567\\nTTA__TAATAATTATATA 12 14\\n? 012345678901234567\\nTTATA__ATAATTATATA 13 15\\n? 012345678901234567\\nTTATATTATAA__ATATA 13 16\\n? 012345678901234567\\nT__TATTATAATAATATA 13 17\\n? 012345678901234567\\nTAATATTATAAT__TATA 13 18\\n? 012345678901234567\\nTAATATTATA__ATTATA 13 19\\n? 012345678901234567\\nTAATATTATATAATTA__ 12 20\\n? \')]\n\n    for i, (stdin, stdout) in enumerate(histories):\n        if i == 2:  # No need for more than two of these\n            break\n        title = "Random History #{}".format(i + 1)\n        args = []\n        result = None\n\n        test = {\n            "title": title,\n            "stdin": stdin,\n            "stdout": stdout\n        }\n\n        interactions.append(test)\n\n    interactions.append({\n        "title": "Gracious Quit",\n        "stdin": "8\\nq\\n",\n        "stdout": None,\n        "stderr": None,\n        "strict_result": False,\n        "exit_allowed": False,\n        "exit_error": "exit()/quit() should not be called (use break/return instead)"\n    })\n\n    for interaction in interactions:\n        interact_defaults = {\n            "args": [],\n            "result": None,\n            "exit_allowed": True\n        }\n\n        full_interaction = {}\n        full_interaction.update(interact_defaults)\n        full_interaction.update(interaction)\n        interaction.update(full_interaction)\n\n    data = {}\n    for i in (\n    "initial_states", "position_strings", "diffs", "blank_positions", "moves", "current_states", "interactions"):\n        data[i] = locals()[i]\n\n    return data\n'
DEFAULTS['TEST_DATA'] = None
# END DEFAULT OVERRIDES #
# #############################################################################

class AssignmentOneMaster(TestMaster):
    def prepare(self):
        fns = """
            make_initial_state
            make_position_string
            num_diffs
            position_of_blanks
            make_move
            show_current_state
            interact
        """.strip().split()

        # (class_name, [method, ...], super_class_1, super_class_2, ...)
        # klasses = []

        module = self._module

        # InheritanceTestCase = create_inheritance_test_case(module, classes=klasses)

        data = self._test_data

        self._tests = [
            create_io_test_case(module, "make_initial_state", data['initial_states']),
            create_io_test_case(module, "make_position_string", data['position_strings']),
            create_io_test_case(module, "num_diffs", data['diffs']),
            create_io_test_case(module, "position_of_blanks", data['blank_positions']),
            create_io_test_case(module, "make_move", data['moves']),

            create_io_test_case(module, "show_current_state", data['current_states']),
            create_io_test_case(module, "interact", data['interactions']),

            create_naming_test_case(module, functions=fns),
            create_docstring_test_case(module, functions=fns),
        ]

if __name__ == "__main__":
    t = AssignmentOneMaster()
    t.main()